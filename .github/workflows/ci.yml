name: Create and publish a Docker image

on:
  push:
  schedule:
    - cron: '0 0 * * *'
    - cron: '0 12 * * *'

env:
  REGISTRY: ghcr.io
  # see https://github.com/game-ci/docker/tags
  BASE_REPO_VERSION: 0.17.0

jobs:
  editor:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        image-os: [ubuntu]
        path: [editor]
        unity-prefix: ['2019', '2020', '2021']

    steps:
      - uses: actions/checkout@v2

      - name: Find the latest Unity version
        id: version-select
        shell: pwsh
        run: |
          $pair = scripts/latest-version.ps1 "${{ matrix.unity-prefix }}"
          $version,$changeset = $pair.split("/")
          echo "::set-output name=version::$version"
          echo "::set-output name=changeset::$changeset"
          echo "::set-output name=imageTag::${{ matrix.path }}-${{ matrix.image-os }}-$version"

      - name: Check if the same version already exists
        id: exists
        run: |
          if docker manifest inspect ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.version-select.outputs.imageTag }} > /dev/null ; then
            echo "::set-output name=value::1"
          else
            echo "::set-output name=value::0"
          fi

      - name: Status
        run: |
          echo "version = ${{ steps.version-select.outputs.version }}"
          echo "changeset = ${{ steps.version-select.outputs.changeset }}"
          echo "image = ${{ steps.version-select.outputs.imageTag }}"
          echo "exists already = ${{ steps.exists.outputs.value }}"

      - name: Prepare Dockerfile
        if: ${{ steps.exists.outputs.value == 0 }}
        working-directory: ${{ matrix.path }}
        run: |
          wget -O Dockerfile https://raw.githubusercontent.com/game-ci/docker/v${{ env.BASE_REPO_VERSION }}/images/${{ matrix.image-os }}/${{ matrix.path }}/Dockerfile
          patch --verbose --batch --unified Dockerfile Dockerfile.patch
          cat Dockerfile.append >> Dockerfile
          cat Dockerfile

      # Free up some disk space so we don't run out while building the docker image. Some commands that took longer
      # to execute are commented out but if more space is needed in the future, they can be enabled again.
      - name: Free disk space
        if: ${{ steps.exists.outputs.value == 0 }}
        run: |
          # time df -h
          sudo time swapoff -a
          sudo time rm -f /swapfile
          # sudo time rm -rf /usr/local/lib/android
          sudo time rm -rf /usr/share/dotnet
          sudo time rm -rf /usr/share/swift
          sudo time rm -rf /usr/local/.ghcup
          # sudo time rm -rf /usr/local/lib/node_modules
          # sudo time rm -rf /usr/lib/google-cloud-sdk
          # sudo time rm -rf /opt/pipx
          sudo time rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo time apt-get clean
          sudo time rm -rf /var/lib/apt/lists/*
          # time docker rmi $(docker image ls -aq)
          # time du --max-depth=3 --threshold=100M -h /usr /opt /var 2>/dev/null | sort -hr
          # time df -h

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        if: ${{ steps.exists.outputs.value == 0 }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Collect metadata
        uses: docker/metadata-action@v3
        if: ${{ steps.exists.outputs.value == 0 }}
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}

      - name: Build the Docker image
        uses: docker/build-push-action@v2
        if: ${{ steps.exists.outputs.value == 0 }}
        with:
          context: ./${{ matrix.path }}
          push: ${{ github.ref_name == 'main' }}
          # tags: ${{ steps.meta.outputs.tags }}
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.version-select.outputs.imageTag }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            module=ios android android-sdk-ndk-tools android-open-jdk webgl
            hubImage=unityci/hub:${{ matrix.image-os }}-${{ env.BASE_REPO_VERSION }}
            baseImage=unityci/base:${{ matrix.image-os }}-${{ env.BASE_REPO_VERSION }}
            version=${{ steps.version-select.outputs.version }}
            changeSet=${{ steps.version-select.outputs.changeset }}
